
import React, { useState, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Calculator, Download, Share2 } from "lucide-react";
import { toast } from "sonner";

interface BudgetItem {
  category: string;
  percentage: number;
  amount: number;
  color: string;
}

const BudgetCalculator = () => {
  const [totalBudget, setTotalBudget] = useState(500000);
  const [guestCount, setGuestCount] = useState(200);
  
  const budgetCategories: Omit<BudgetItem, 'amount'>[] = [
    { category: "Venue", percentage: 35, color: "#FF6B9D" },
    { category: "Catering", percentage: 25, color: "#4ECDC4" },
    { category: "Photography", percentage: 15, color: "#45B7D1" },
    { category: "Decoration", percentage: 10, color: "#96CEB4" },
    { category: "Bridal Wear", percentage: 8, color: "#FFEAA7" },
    { category: "Music & Entertainment", percentage: 5, color: "#DDA0DD" },
    { category: "Miscellaneous", percentage: 2, color: "#98D8C8" }
  ];

  const calculatedBudget = useMemo(() => {
    return budgetCategories.map(item => ({
      ...item,
      amount: Math.round((totalBudget * item.percentage) / 100)
    }));
  }, [totalBudget]);

  const perPersonCost = useMemo(() => {
    return Math.round(totalBudget / guestCount);
  }, [totalBudget, guestCount]);

  const handleTotalBudgetChange = (value: string) => {
    const numValue = parseInt(value) || 0;
    if (numValue >= 0 && numValue <= 5000000) {
      setTotalBudget(numValue);
    }
  };

  const handleGuestCountChange = (value: string) => {
    const numValue = parseInt(value) || 0;
    if (numValue >= 1 && numValue <= 2000) {
      setGuestCount(numValue);
    }
  };

  const handleDownloadBudget = () => {
    const budgetData = calculatedBudget.map(item => 
      `${item.category}: ₹${item.amount.toLocaleString('en-IN')} (${item.percentage}%)`
    ).join('\n');
    
    const content = `Wedding Budget Breakdown
Total Budget: ₹${totalBudget.toLocaleString('en-IN')}
Guest Count: ${guestCount}
Cost per Person: ₹${perPersonCost.toLocaleString('en-IN')}

${budgetData}

Generated by ShaadiSaathi Budget Calculator`;
    
    try {
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `wedding-budget-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success("Budget breakdown downloaded successfully!");
    } catch (error) {
      console.error('Download error:', error);
      toast.error("Failed to download budget. Please try again.");
    }
  };

  const handleShareBudget = async () => {
    const shareText = `My Wedding Budget: ₹${totalBudget.toLocaleString('en-IN')} for ${guestCount} guests (₹${perPersonCost.toLocaleString('en-IN')} per person)`;
    
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'My Wedding Budget',
          text: shareText,
          url: window.location.href
        });
      } else {
        await navigator.clipboard.writeText(shareText);
        toast.success("Budget details copied to clipboard!");
      }
    } catch (error) {
      console.error('Share error:', error);
      toast.error("Failed to share budget. Please try again.");
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-2xl font-heading">
            <Calculator className="mr-2 h-6 w-6 text-wedding-pink" />
            Wedding Budget Calculator
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="totalBudget">Total Budget (₹)</Label>
                <Input
                  id="totalBudget"
                  type="number"
                  value={totalBudget}
                  onChange={(e) => handleTotalBudgetChange(e.target.value)}
                  className="mt-1"
                  min="0"
                  max="5000000"
                  step="10000"
                />
                <div className="mt-2">
                  <Slider
                    value={[totalBudget]}
                    onValueChange={(value) => setTotalBudget(value[0])}
                    max={2000000}
                    min={100000}
                    step={50000}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>₹1L</span>
                    <span>₹20L</span>
                  </div>
                </div>
              </div>
              
              <div>
                <Label htmlFor="guestCount">Number of Guests</Label>
                <Input
                  id="guestCount"
                  type="number"
                  value={guestCount}
                  onChange={(e) => handleGuestCountChange(e.target.value)}
                  className="mt-1"
                  min="1"
                  max="2000"
                  step="10"
                />
                <div className="mt-2">
                  <Slider
                    value={[guestCount]}
                    onValueChange={(value) => setGuestCount(value[0])}
                    max={1000}
                    min={50}
                    step={10}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>50</span>
                    <span>1000+</span>
                  </div>
                </div>
              </div>
              
              <div className="p-4 bg-wedding-cream/50 rounded-lg">
                <h4 className="font-semibold text-wedding-navy mb-2">Budget Summary</h4>
                <div className="space-y-1 text-sm">
                  <p>Total Budget: <span className="font-semibold">₹{totalBudget.toLocaleString('en-IN')}</span></p>
                  <p>Guests: <span className="font-semibold">{guestCount}</span></p>
                  <p>Cost per Person: <span className="font-semibold text-wedding-pink">₹{perPersonCost.toLocaleString('en-IN')}</span></p>
                </div>
              </div>
            </div>
            
            <div className="space-y-3">
              <h4 className="font-semibold text-lg">Budget Breakdown</h4>
              <div className="space-y-2 max-h-80 overflow-y-auto">
                {calculatedBudget.map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors">
                    <div className="flex items-center space-x-3">
                      <div 
                        className="w-4 h-4 rounded-full flex-shrink-0" 
                        style={{ backgroundColor: item.color }}
                      />
                      <span className="font-medium text-sm">{item.category}</span>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold text-sm">₹{item.amount.toLocaleString('en-IN')}</div>
                      <div className="text-xs text-gray-500">{item.percentage}%</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t">
            <Button 
              onClick={handleDownloadBudget}
              className="bg-wedding-navy hover:bg-wedding-navy/90 flex-1"
            >
              <Download className="w-4 h-4 mr-2" />
              Download Budget
            </Button>
            <Button 
              onClick={handleShareBudget}
              variant="outline"
              className="border-wedding-pink text-wedding-pink hover:bg-wedding-pink/10 flex-1"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Share Budget
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default BudgetCalculator;
